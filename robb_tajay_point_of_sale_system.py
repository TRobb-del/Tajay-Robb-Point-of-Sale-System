# -*- coding: utf-8 -*-
"""Robb_Tajay_Point_of_Sale_System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v85-R6fB-yap35Z6C2GSrWqoqYzGhMb8
"""

import random
import datetime
import pytz
your_timezone= pytz.timezone('Jamaica')

# Store Name
STORE_NAME = "Best Buy - Money Well Spent"

# Product Catalog: {serial: [name, price, stock, unit]}
products = {
    101: ["Milk", 600, 100, "carton"],
    102: ["Bread", 350, 200, "loaf"],
    103: ["Eggs", 50, 500, "dozen"],
    104: ["Rice", 75, 1000, "lbs"],
    105: ["Chicken", 270, 150, "lbs"],
    106: ["Sugar", 175, 400, "lbs"],
    107: ["Flour", 150, 300, "lbs"],
    108: ["Butter", 470, 180, "pack"],
    109: ["Oil", 800, 90, "bottle"],
    110: ["Cereal", 600, 150, "box"],
}

cart = {}

# Display Products
def display_products():
    print("\nAvailable Products:")
    print("-" * 60)
    print(f"{'Serial':<10}{'Product':<15}{'Price (JMD)':<15}{'Stock':<10}")
    print("-" * 60)
    for code, (name, price, stock, unit) in products.items():
        print(f"{code:<10}{name:<15}{price:<15}{stock:<10}")
    print("-" * 60)

# Search Product
def search_product(term):
    term = term.lower()
    found = False
    for code, (name, price, stock, unit) in products.items():
        if term in name.lower():
            print(f"Found: {name} | Price: JMD {price} | Stock: {stock} {unit} | Serial: {code}")
            found = True
    if not found:
        print("Product not found.")

# Get product code from name or serial
def get_product_code(user_input):
    try:
        code = int(user_input)
        if code in products:
            return code
    except:
        pass
    # Try matching by name
    for code, (name, _, _, _) in products.items():
        if name.lower() == user_input.lower():
            return code
    return None

# Add to Cart
def add_to_cart(user_input, quantity):
    code = get_product_code(user_input)
    if code is None:
        print("Product not found.")
        return
    name, price, stock, unit = products[code]
    if quantity > stock:
        print(f"Only {stock} {unit} available for {name}.")
        return
    if code in cart:
        cart[code][0] += quantity
        cart[code][1] += quantity * price
    else:
        cart[code] = [quantity, quantity * price, unit]
    products[code][2] -= quantity
    print(f"Added {quantity} {unit} of {name} to cart.")

# Remove from Cart
def remove_from_cart(user_input, quantity=None):
    code = get_product_code(user_input)
    if code is None or code not in cart:
        print("Product not in cart.")
        return
    current_qty, total_price, unit = cart[code]
    if quantity is None or quantity >= current_qty:
        products[code][2] += current_qty
        del cart[code]
        print("Removed all from cart.")
    else:
        products[code][2] += quantity
        unit_price = total_price / current_qty
        cart[code][0] -= quantity
        cart[code][1] -= quantity * unit_price
        if cart[code][0] == 0:
            del cart[code]
        print(f"Removed {quantity} {unit} from cart.")

# View Cart
def view_cart():
    if not cart:
        print("\nYour cart is empty.")
        return
    print("\nItems in Cart:")
    print("-" * 55)
    print(f"{'Product':<15}{'Qty':<10}{'Unit':<10}{'Total (JMD)'}")
    print("-" * 55)
    for code, (qty, total, unit) in cart.items():
        name = products[code][0]
        print(f"{name:<15}{qty:<10}{unit:<10}{int(total)}")
    print("-" * 55)

# Clear Cart
def clear_cart():
    for code, (qty, _, _) in cart.items():
        products[code][2] += qty
    cart.clear()
    print("Cart cleared.")
    display_products()
    print("-" * 55)

# Checkout
def checkout():
    if not cart:
        print("Cart is empty.")
        return

    subtotal = sum(item[1] for item in cart.values())
    discount = 0
    if subtotal >= 10000:
        discount = 0.10 * subtotal
    elif subtotal >= 5000:
        discount = 0.05 * subtotal

    tax = 0.15 * (subtotal - discount)
    total = subtotal - discount + tax

#Function for the amount received
    print("-" * 55)
    while True:
      try:
            amount_received = float(input(f"Total due: JMD {int(total)}. Enter amount received: "))
            change = amount_received - total
            if change < 0:
                print(f"Insufficient funds. Still need JMD {abs(int(change))}.")
            else:
                break
      except ValueError:
            print("Invalid number.")



    print("-" * 55)
    receipt_no = random.randint(100000, 999999)
    receipt_lines = []
    receipt_lines.append("-" * 35)
    receipt_lines.append(STORE_NAME.center(35))
    receipt_lines.append(f"Receipt No:     {receipt_no}")
    current_time = datetime.datetime.now(your_timezone)
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")
    receipt_lines.append(formatted_time)
    receipt_lines.append("-" * 35)
    receipt_lines.append(f"{'Item':<15}{'Qty':<5}{'Total'}")
    receipt_lines.append("-" * 35)

    for code, (qty, total_price, unit) in cart.items():
        name = products[code][0]
        receipt_lines.append(f"{name:<15}{qty:<5}{int(total_price)}")

    receipt_lines.append("-" * 35)
    receipt_lines.append(f"{'Subtotal:':<20} JMD {int(subtotal)}")
    receipt_lines.append(f"{'Discount:':<20} JMD -{int(discount)}")
    receipt_lines.append(f"{'Tax (15%):':<20} JMD {int(tax)}")
    receipt_lines.append(f"{'Total:':<20} JMD {int(total)}")
    receipt_lines.append("-" * 35)
    receipt_lines.append("Thank you for shopping!")

    # Print receipt
    receipt_lines.append(f"{'Amount Paid:':<20} JMD {int(amount_received)}")
    receipt_lines.append(f"{'Change:':<20} JMD {int(change)}")
    receipt_lines.append("-" * 35)

    for line in receipt_lines:
        print(line)

    # Save to file
    with open(f"receipt_{receipt_no}.txt", "w") as f:
        for line in receipt_lines:
            f.write(line + "\n")

    cart.clear()

# Main Menu
def menu():
    while True:
        print("\n===== BEST BUY SUPERMARKET =====")
        print("1. View Products")
        print("2. Search Product")
        print("3. Add to Cart")
        print("4. Remove from Cart")
        print("5. View Cart")
        print("6. Clear Cart")
        print("7. Checkout")
        print("8. Exit")
        choice = input("Enter choice (1-8): ")

        if choice == '1':
            display_products()
        elif choice == '2':
            term = input("Enter product name to search: ")
            search_product(term)
        elif choice == '3':
            try:
                item = input("Enter Product Name or Serial Number: ")
                qty = int(input("Enter Quantity: "))
                add_to_cart(item, qty)
            except ValueError:
                print("Invalid input.")

cart.clear()

# Main Menu
def menu():
    while True:
        print("\n===== BEST BUY SUPERMARKET =====")
        print("1. View Products")
        print("2. Search Product")
        print("3. Add to Cart")
        print("4. Remove from Cart")
        print("5. View Cart")
        print("6. Clear Cart")
        print("7. Checkout")
        print("8. Exit")
        choice = input("Enter choice (1-8): ")

        if choice == '1':
            display_products()
        elif choice == '2':
            term = input("Enter product name to search: ")
            search_product(term)
        elif choice == '3':
            try:
                item = input("Enter Product Name or Serial Number: ")
                qty = int(input("Enter Quantity: "))
                add_to_cart(item, qty)
            except:
                print("Invalid input.")
        elif choice == '4':
            try:
                item = input("Enter Product Name or Serial Number to Remove: ")
                qty = input("Enter Quantity to Remove (Leave blank to remove all): ")
                qty = int(qty) if qty.strip() else None
                remove_from_cart(item, qty)
            except:
                print("Invalid input.")
        elif choice == '5':
            view_cart()
        elif choice == '6':
            clear_cart()
        elif choice == '7':
            checkout()
        elif choice == '8':
            print("Goodbye! Thank You For Visiting!")
            break
        else:
            print("Invalid choice. Please select a valid option.")

menu()